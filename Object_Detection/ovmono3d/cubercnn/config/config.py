from detectron2.config import CfgNode as CN

def get_cfg_defaults(cfg):
    cfg.DATASETS.CATEGORY_NAMES = []
    cfg.DATASETS.IGNORE_NAMES = []
    cfg.DATALOADER.BALANCE_DATASETS = False
    cfg.DATASETS.TRUNCATION_THRES = 0.99
    cfg.DATASETS.VISIBILITY_THRES = 0.01
    cfg.DATASETS.MIN_HEIGHT_THRES = 0.00
    cfg.DATASETS.MAX_DEPTH = 1e8
    cfg.DATASETS.MODAL_2D_BOXES = False
    cfg.DATASETS.TRUNC_2D_BOXES = True
    cfg.DATASETS.TEST_BASE = ('SUNRGBD_test', 'Hypersim_test', 'ARKitScenes_test', 'Objectron_test', 'KITTI_test', 'nuScenes_test') 
    cfg.DATASETS.TEST_NOVEL = ('SUNRGBD_test_novel','ARKitScenes_test_novel', 'KITTI_test_novel') 
    cfg.DATASETS.CATEGORY_NAMES_BASE = ('chair', 'table', 'cabinet', 'car', 'lamp', 'books', 'sofa', 'pedestrian', 'picture', 'window', 'pillow', 'truck', 'door', 'blinds', 'sink', 'shelves', 'television', 'shoes', 'cup', 'bottle', 'bookcase', 'laptop', 'desk', 'cereal box', 'floor mat', 'traffic cone', 'mirror', 'barrier', 'counter', 'camera', 'bicycle', 'toilet', 'bus', 'bed', 'refrigerator', 'trailer', 'box', 'oven', 'clothes', 'van', 'towel', 'motorcycle', 'night stand', 'stove', 'machine', 'stationery', 'bathtub', 'cyclist', 'curtain', 'bin')
    cfg.DATASETS.CATEGORY_NAMES_NOVEL = ('monitor', 'bag', 'dresser', 'board', 'printer', 'keyboard', 'painting', 'drawers', 'microwave', 'computer', 'kitchen pan', 'potted plant', 'tissues', 'rack', 'tray', 'toys', 'phone', 'podium', 'cart', 'soundsystem', 'fireplace', 'tram')
    cfg.DATASETS.ORACLE2D_FILES = CN()
    cfg.DATASETS.ORACLE2D_FILES.EVAL_MODE = 'target_aware'
    for mode in ['target_aware', 'previous_metric']:
        cfg.DATASETS.ORACLE2D_FILES[mode] = CN()
        cfg.DATASETS.ORACLE2D_FILES[mode].novel = CN()
        cfg.DATASETS.ORACLE2D_FILES[mode].base = CN()
        novel_datasets = {'SUNRGBD_test_novel': 'sunrgbd', 'ARKitScenes_test_novel': 'arkitscenes', 'KITTI_test_novel': 'kitti'}
        base_datasets = {'SUNRGBD_test': 'sunrgbd', 'Hypersim_test': 'hypersim', 'ARKitScenes_test': 'arkitscenes', 'Objectron_test': 'objectron', 'KITTI_test': 'kitti', 'nuScenes_test': 'nuscenes'}
        for dataset, dataset_name in novel_datasets.items():
            prefix = 'gdino_novel_previous_metric' if mode == 'previous_metric' else 'gdino'
            cfg.DATASETS.ORACLE2D_FILES[mode].novel[dataset] = f'datasets/Omni3D/{prefix}_{dataset_name}_novel_oracle_2d.json'
        for dataset, dataset_name in base_datasets.items():
            prefix = 'gdino_previous_eval' if mode == 'previous_metric' else 'gdino'
            cfg.DATASETS.ORACLE2D_FILES[mode].base[dataset] = f'datasets/Omni3D/{prefix}_{dataset_name}_base_oracle_2d.json'
    cfg.MODEL.FPN.IN_FEATURE = None
    cfg.MODEL.FPN.SQUARE_PAD = 0
    cfg.MODEL.RPN.IGNORE_THRESHOLD = 0.5
    cfg.MODEL.DINO = CN()
    cfg.MODEL.DINO.NAME = 'dinov2'
    cfg.MODEL.DINO.MODEL_NAME = 'vitb14'
    cfg.MODEL.DINO.OUTPUT = 'dense'
    cfg.MODEL.DINO.LAYER = -1
    cfg.MODEL.DINO.RETURN_MULTILAYER = False
    cfg.MODEL.MAE = CN()
    cfg.MODEL.MAE.CHECKPOINT = 'facebook/vit-mae-base'
    cfg.MODEL.MAE.OUTPUT = 'dense'
    cfg.MODEL.MAE.LAYER = -1
    cfg.MODEL.MAE.RETURN_MULTILAYER = False
    cfg.MODEL.CLIP = CN()
    cfg.MODEL.CLIP.ARCH = 'ViT-B-16'
    cfg.MODEL.CLIP.CHECKPOINT = 'openai'
    cfg.MODEL.CLIP.OUTPUT = 'dense'
    cfg.MODEL.CLIP.LAYER = -1
    cfg.MODEL.CLIP.RETURN_MULTILAYER = False
    cfg.MODEL.MIDAS = CN()
    cfg.MODEL.MIDAS.OUTPUT = 'dense'
    cfg.MODEL.MIDAS.LAYER = -1
    cfg.MODEL.MIDAS.RETURN_MULTILAYER = False
    cfg.MODEL.SAM = CN()
    cfg.MODEL.SAM.OUTPUT = 'dense'
    cfg.MODEL.SAM.LAYER = -1
    cfg.MODEL.SAM.RETURN_MULTILAYER = False
    cfg.MODEL.ROI_CUBE_HEAD = CN()
    cfg.MODEL.ROI_CUBE_HEAD.NAME = "CubeHead"
    cfg.MODEL.ROI_CUBE_HEAD.POOLER_RESOLUTION = 7
    cfg.MODEL.ROI_CUBE_HEAD.POOLER_SAMPLING_RATIO = 0
    cfg.MODEL.ROI_CUBE_HEAD.POOLER_TYPE = "ROIAlignV2"
    cfg.MODEL.ROI_CUBE_HEAD.NUM_CONV = 0
    cfg.MODEL.ROI_CUBE_HEAD.CONV_DIM = 256
    cfg.MODEL.ROI_CUBE_HEAD.NUM_FC = 2
    cfg.MODEL.ROI_CUBE_HEAD.FC_DIM = 1024
    cfg.MODEL.ROI_CUBE_HEAD.USE_TRANSFORMER = False
    cfg.MODEL.ROI_CUBE_HEAD.Z_TYPE = "direct"
    cfg.MODEL.ROI_CUBE_HEAD.POSE_TYPE = "6d"
    cfg.MODEL.ROI_CUBE_HEAD.INVERSE_Z_WEIGHT = False
    cfg.MODEL.ROI_CUBE_HEAD.VIRTUAL_DEPTH = True
    cfg.MODEL.ROI_CUBE_HEAD.VIRTUAL_FOCAL = 512.0
    cfg.MODEL.ROI_CUBE_HEAD.DISENTANGLED_LOSS = True
    cfg.MODEL.ROI_CUBE_HEAD.CLUSTER_BINS = 1
    cfg.MODEL.USE_BN = True
    cfg.MODEL.ROI_CUBE_HEAD.ALLOCENTRIC_POSE = True
    cfg.MODEL.ROI_CUBE_HEAD.CHAMFER_POSE = True
    cfg.MODEL.ROI_CUBE_HEAD.SHARED_FC = True
    cfg.MODEL.STABILIZE = 0.01
    cfg.MODEL.ROI_CUBE_HEAD.DIMS_PRIORS_ENABLED = True
    cfg.MODEL.ROI_CUBE_HEAD.DIMS_PRIORS_FUNC = 'exp'
    cfg.MODEL.ROI_CUBE_HEAD.USE_CONFIDENCE = 1.0
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_3D = 1.0
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_XY = 1.0
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_Z = 1.0
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_DIMS = 1.0
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_POSE = 1.0
    cfg.MODEL.DLA = CN()
    cfg.MODEL.DLA.TYPE = 'dla34'
    cfg.MODEL.DLA.TRICKS = False
    cfg.MODEL.ROI_CUBE_HEAD.LOSS_W_JOINT = 1.0
    cfg.SOLVER.TYPE = 'sgd'
    cfg.MODEL.RESNETS.TORCHVISION = True
    cfg.TEST.DETECTIONS_PER_IMAGE = 100
    cfg.TEST.VISIBILITY_THRES = 1/2.0
    cfg.TEST.TRUNCATION_THRES = 1/2.0
    cfg.TEST.ORACLE2D = True
    cfg.TEST.CAT_MODE = "base"
    cfg.INPUT.RANDOM_FLIP = "horizontal"
    cfg.INPUT.TRAIN_SET_PERCENTAGE = 1.0
    cfg.MODEL.RPN.OBJECTNESS_UNCERTAINTY = 'IoUness'
    cfg.MODEL.ROI_CUBE_HEAD.SCALE_ROI_BOXES = 0.0
    cfg.MODEL.WEIGHTS_PRETRAIN = ''